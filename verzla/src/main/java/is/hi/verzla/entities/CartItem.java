package is.hi.verzla.entities;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;

/**
 * Represents an individual item in a shopping cart, associated with a product.
 * <p>
 * Each {@code CartItem} is linked to a single {@link Product} and a single
 * {@link Cart}. It includes the quantity of the product that the user intends
 * to purchase.
 * </p>
 *
 * @see Product
 * @see Cart
 */
@Entity
@Table(name = "cart_items")
public class CartItem {

  /**
   * The unique identifier for the cart item.
   * <p>
   * This ID is autogenerated and serves as the primary key in the database.
   * </p>
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The product associated with this cart item.
   * <p>
   * Cannot be null. Represents the specific product that the user has added
   * to their cart.
   * </p>
   */
  @NotNull(message = "Product cannot be null")
  @ManyToOne
  @JoinColumn(name = "product_id", nullable = false)
  private Product product;

  /**
   * The cart to which this item belongs.
   * <p>
   * Cannot be null. Represents the specific shopping cart that the user has.
   * </p>
   */
  @ManyToOne
  @JoinColumn(name = "cart_id", nullable = false)
  private Cart cart;

  /**
   * The quantity of the product in this cart item.
   * <p>
   * Must be a positive integer, representing how many units of the product
   * the user intends to purchase.
   * </p>
   */
  @Positive(message = "Quantity must be positive")
  private int quantity;

  /**
   * Default constructor.
   */
  public CartItem() {
  }

  /**
   * Retrieves the unique identifier of this cart item.
   *
   * @return the ID of this cart item
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the unique identifier of this cart item.
   *
   * @param id the ID to set
   */
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Retrieves the product associated with this cart item.
   *
   * @return the {@link Product} associated with this cart item
   */
  public Product getProduct() {
    return product;
  }

  /**
   * Associates a product with this cart item.
   *
   * @param product the {@link Product} to associate
   */
  public void setProduct(Product product) {
    this.product = product;
  }

  /**
   * Retrieves the cart associated with this cart item.
   *
   * @return the {@link Cart} associated with this cart item
   */
  public Cart getCart() {
    return cart;
  }

  /**
   * Associates this cart item with a specific cart.
   *
   * @param cart the {@link Cart} to associate
   */
  public void setCart(Cart cart) {
    this.cart = cart;
  }

  /**
   * Retrieves the quantity of the product in this cart item.
   *
   * @return the quantity of the product
   */
  public int getQuantity() {
    return quantity;
  }

  /**
   * Sets the quantity of the product in this cart item.
   *
   * @param quantity the quantity to set; must be positive
   */
  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }
}
