package is.hi.verzla.entities;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotEmpty;

/**
 * Represents a user in the e-commerce system, including their name, email, and
 * password.
 * <p>
 * Each {@code User} has a unique email address and can be associated with
 * multiple
 * {@link Wishlist} and {@link Cart} entities.
 * </p>
 *
 * <p>
 * Passwords should be securely hashed before being stored to ensure user
 * security.
 * </p>
 */
@Entity
@Table(name = "users")
public class User {

  /**
   * The unique identifier for the user.
   * <p>
   * This ID is autogenerated and serves as the primary key in the database.
   * </p>
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The name of the user.
   * <p>
   * Cannot be empty. Represents the full name of the user.
   * </p>
   */
  @NotEmpty(message = "Name cannot be empty")
  private String name;

  /**
   * The email address of the user.
   * <p>
   * Must be a valid email format and unique across all users.
   * </p>
   */
  @Email(message = "Email should be valid")
  @NotEmpty(message = "Email cannot be empty")
  @Column(unique = true, nullable = false)
  private String email;

  /**
   * The password of the user.
   * <p>
   * Cannot be empty. Should be securely hashed before storage.
   * </p>
   */
  @NotEmpty(message = "Password cannot be empty")
  @Column(nullable = false)
  private String password;

  @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonManagedReference
  private Cart cart;

  @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
  @JsonManagedReference
  private Wishlist wishlist;

  /**
   * Default constructor for JPA.
   */
  public User() {
  }

  /**
   * Constructs a new User with the specified name, email, and password.
   *
   * @param name     the full name of the user
   * @param email    the email address of the user
   * @param password the password of the user (should be hashed)
   */
  public User(String name, String email, String password) {
    this.name = name;
    this.email = email;
    this.password = password;
  }

  /**
   * Retrieves the unique identifier of the user.
   *
   * @return the ID of the user
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the unique identifier of the user.
   *
   * @param id the ID to set
   */
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Retrieves the name of the user.
   *
   * @return the full name of the user
   */
  public String getName() {
    return name;
  }

  /**
   * Sets the name of the user.
   *
   * @param name the full name to set
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Retrieves the email address of the user.
   *
   * @return the email address of the user
   */
  public String getEmail() {
    return email;
  }

  /**
   * Sets the email address of the user.
   *
   * @param email the email address to set
   */
  public void setEmail(String email) {
    this.email = email;
  }

  /**
   * Retrieves the password of the user.
   *
   * @return the password of the user (hashed)
   */
  public String getPassword() {
    return password;
  }

  /**
   * Sets the password of the user.
   *
   * @param password the password to set (should be hashed)
   */
  public void setPassword(String password) {
    this.password = password;
  }

  public Cart getCart() {
    return cart;
  }

  public void setCart(Cart cart) {
    this.cart = cart;
  }

  public Wishlist getWishlist() {
    return wishlist;
  }

  public void setWishlist(Wishlist wishlist) {
    this.wishlist = wishlist;
  }
}
